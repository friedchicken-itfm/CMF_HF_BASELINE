# src/core/events.py
"""
Defines the event-driven architecture's core data structures using Pydantic.

These events are passed between different components of the system.
"""
from datetime import datetime
from pydantic import BaseModel
from typing import Literal, Dict

# Event Types:
# 1. MarketDataEvent: Raw market data from the exchange.
#    data_collector -> signal_agent
#
# 2. SignalEvent: A trading signal generated by a model for a single asset.
#    signal_agent -> risk_manager
#
# 3. RiskAdjustedSignalEvent: A signal that has been vetted by the risk manager.
#    risk_manager -> portfolio_manager
#
# 4. PortfolioDecisionEvent: A concrete order to be executed.
#    portfolio_manager -> order_executor
#
# 5. OrderExecutionEvent: The result of an executed order.
#    order_executor -> (logging/portfolio update)

class MarketDataEvent(BaseModel):
    """Event for new market data."""
    timestamp: datetime
    symbol: str  # e.g., 'BTC/USDT'
    open: float
    high: float
    low: float
    close: float
    volume: float

class SignalEvent(BaseModel):
    """Event for a trading signal from the ML model."""
    timestamp: datetime
    symbol: str
    # 'buy', 'sell', 'hold'
    signal_type: Literal['buy', 'sell', 'hold']
    # Strength of the signal (e.g., from 0.0 to 1.0)
    strength: float

class RiskAdjustedSignalEvent(BaseModel):
    """
    Event for a signal that has been adjusted by the Risk Manager.
    The strength is now the suggested position size as a fraction of portfolio.
    """
    timestamp: datetime
    symbol: str
    signal_type: Literal['buy', 'sell', 'hold']
    # e.g., 0.1 for 10% of portfolio
    adjusted_size: float

class PortfolioDecisionEvent(BaseModel):
    """
    Event representing a final decision to place an order.
    """
    timestamp: datetime
    symbol: str
    # 'buy' or 'sell'
    action: Literal['buy', 'sell']
    # Quantity of the asset to trade
    quantity: float

class OrderExecutionEvent(BaseModel):
    """Event representing the result of an order execution."""
    timestamp: datetime
    symbol: str
    action: Literal['buy', 'sell']
    quantity: float
    # Price at which the order was filled
    fill_price: float
    # Commission paid
    commission: float
    # 'filled', 'partially_filled', 'failed'
    status: str